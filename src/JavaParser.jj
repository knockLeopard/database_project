options
{
  static = true;
  DEBUG_PARSER = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(SimpleDBMSParser)

public class SimpleDBMSParser
{
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE = 2;
  public static final int PRINT_DESC = 3;
  public static final int PRINT_SHOW_TABLES = 4;
  public static final int PRINT_SELECT = 5;
  public static final int PRINT_INSERT = 6;
  public static final int PRINT_DELETE = 7;
  
  public static void main(String args[]) throws ParseException
  {
    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
    System.out.print("DB_201x-xxxxx> ");

    while (true)
    {
      try
      {
        parser.command();
      }
      catch (Exception e)
      {
        printMessage(PRINT_SYNTAX_ERROR);
        SimpleDBMSParser.ReInit(System.in);
      }
    }
  }

  public static void printMessage(int q)
  {
    switch(q)
    {
      case PRINT_SYNTAX_ERROR:
      	System.out.println("Syntax error");
      	break;
      case PRINT_CREATE_TABLE:
      	System.out.println("\'CREATE TABLE\' requested");
      	break;
      case PRINT_DROP_TABLE:
      	System.out.println("\'DROP TABLE\' requested");
      	break;
      case PRINT_DESC:
      	System.out.println("\'DESC\' requested");
      	break;
      case PRINT_SHOW_TABLES:
      	System.out.println("\'SHOW TABLES\' requested");
      	break;
      case PRINT_SELECT:
      	System.out.println("\'SELECT\' requested");
      	break;
      case PRINT_INSERT:
      	System.out.println("\'INSERT\' requested");
      	break;
      case PRINT_DELETE:
      	System.out.println("\'DELETE\' requested");
      	break;		
    }
    System.out.print("DB_201y-yyyyyy> ");
  }
}

PARSER_END(SimpleDBMSParser)

SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE_TABLE : "create table" >
| < DROP_TABLE : "drop table" >
| < DESC : "desc" >
| < SHOW_TABLES : "show tables" >
| < SELECT : "select" >
| < NOT_NULL : "not null" >
| < PRIMARY_KEY : "primary key" >
| < FOREIGN_KEY : "foreign key" >
| < REFERENCES : "references" >
| < AS : "as" >
| < FROM : "from" >
| < STAR : "*" >
| < WHERE : "where" >
| < AND : "and" >
| < OR : "or" >
| < IS : "is" >
| < NOT : "not" >
| < NULL : "null" >
| < INSERT : "insert" >
| < INTO : "into" >
| < VALUES : "values" >
| < DELETE : "delete" >
}

TOKEN :
{
  < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < PERIOD : ".">
| < UNDERSCORE : "_" >
| < CHAR_STRING : < QUOTE >(< NON_QUOTE_CHARACTER>)*< QUOTE> >
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>
| < SIGN : "+" | "-" >
| < DATE_VALUE : < NNNN >"-"< NN >"-"< NN >>
| < NNNN : < DIGIT>< DIGIT>< DIGIT>< DIGIT>>
| < NN : < DIGIT>< DIGIT>>
| < DIGIT : [ "0"-"9" ] >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < ALPHABET : [ "a"-"z", "A"-"Z" ] >
| < COMPOP :  "<" | ">" | "=" | ">=" | "<=" | "!=" >
| < QUOTE : "\'">
| < NON_QUOTE_CHARACTER : < DIGIT>|< ALPHABET>|< NON_QUOTE_SPECIAL_CHARACTER>|" ">
| < NON_QUOTE_SPECIAL_CHARACTER : "~"|"!"|"@"|"#"|"$"|"%"|"^"|"&"|"*"|"("|")"|"-"
	| "_"|"+"|"="|";"|":"|","|"<"|">"|"."|"/"|"?"|"|"|"\\" >
}

void command() :
{}
{
  queryList()
| (
    < EXIT >
    < SEMICOLON >
    {
      System.exit(0);
    }
  ) 
}

void queryList() :
{
  int q;
}
{
  (
    q = query()
    < SEMICOLON >
    {
      printMessage(q);
    }
  )+
}

int query() :
{
  int q;
}
{
  (
    createTableQuery()
    {
      q = PRINT_CREATE_TABLE;
    }
  )
  (    {
        return q;
    }
  )  
|
  (
    dropTableQuery()
    {
      q = PRINT_DROP_TABLE;
    }
  )
  (
    {
        return q;
    }
   )
|
  (  
    descQuery()
    {
      q = PRINT_DESC;
    }
  ) 
  (
    {
      return q;
    }
  )
|
  (
    showTablesQuery()
    {
      q = PRINT_SHOW_TABLES;
    }
  )
  (
    {
      return q;
    }
  )
|
  (
    selectQuery()
    {
      q = PRINT_SELECT;
    }
  )
  (
    {
      return q;
    }
  )
|
  (
    insertQuery()
    {
      q = PRINT_INSERT;
    }
  )
  (
    {
      return q;
    }
  )
|
  (
    deleteQuery()
    {
      q = PRINT_DELETE;
    }
  )
  (
    {
      return q;
  }
  )
}

// CREATE TABLE
void createTableQuery() :
{}
{
  < CREATE_TABLE >
  tableName()
  tableElementList()
}

void tableElementList() :
{}
{
  < LEFT_PAREN >
  tableElement()
  (
    < COMMA >
    tableElement()
  )*
  < RIGHT_PAREN >
}

void tableElement() :
{
}
{
  columnDefinition()
| tableConstraintDefinition()
}

void columnDefinition() :
{}
{
  columnName()
  dataType()
  (
    < NOT_NULL >
  )?
}

void tableConstraintDefinition() :
{}
{
  primaryKeyConstraint()
| referentialConstraint()
}

void primaryKeyConstraint() :
{}
{
  < PRIMARY_KEY >
  columnNameList()
}

void referentialConstraint() :
{}
{
  < FOREIGN_KEY >
  columnNameList()
  < REFERENCES >
  tableName()
  columnNameList()
}

void columnNameList() :
{}
{
  < LEFT_PAREN >
  columnName()
  (
    < COMMA >
    columnName()
  )*
  < RIGHT_PAREN >
}

void dataType() :
{}
{
  < INT >
| (
    < CHAR >
    < LEFT_PAREN >
    < INT_VALUE >
    < RIGHT_PAREN >
  )
| < DATE >
}

void tableName() :
{}
{
  < LEGAL_IDENTIFIER >
}

void columnName() :
{}
{
  < LEGAL_IDENTIFIER >
}

// DROP TABLE
void dropTableQuery() :
{}
{
  < DROP_TABLE >
  tableName()
}

// DESC
void descQuery() :
{}
{
  < DESC >
  tableName()
}

// SHOW TABLES
void showTablesQuery() :
{}
{
  < SHOW_TABLES >
}

// SELECT
void selectQuery() :
{}
{
  < SELECT >
  selectList()
  tableExpression()
}

void selectList() :
{ }
{
  < STAR >
| (
  selectedColumn()
  (
  < COMMA >
  selectedColumn()
  )*
  )}

// choice conflict
void selectedColumn() :
{ }
{  
  (
    LOOKAHEAD(2)
    tableName()
    < PERIOD >
  )?
  columnName()
  (    < AS >
    columnName()
  )?
}

void tableExpression() :
{
}
{
  fromClause()
  (    whereClause()
  )?
}

void fromClause() :
{
}
{
  < FROM >
  tableReferenceList()
}

void tableReferenceList() :
{
}
{
  referedTable()
  (    < COMMA >
    referedTable()
  )*
}

void referedTable() :
{
}
{
  tableName()
  (    tableName()
  )?
}

void whereClause() :
{
}
{
  < WHERE >
  booleanValueExpression()
}

void booleanValueExpression() :
{
}
{
  booleanTerm()
  (    < OR >
    booleanTerm()
  )*
}

void booleanTerm() :
{
}
{
  booleanFactor()
  (    < AND >
    booleanFactor()
  )*
}

void booleanFactor() :
{ }
{
  (    < NOT >
  )?
  booleanTest()
}

void booleanTest() :
{
}
{
  predicate()
| parenthesizedBooleanExpression()
}

void parenthesizedBooleanExpression() :
{
}
{
  < LEFT_PAREN >
  booleanValueExpression()
  < RIGHT_PAREN >
}

// choice conflict
void predicate() :
{
}
{
  LOOKAHEAD(3)
  comparisonPredicate()
| nullPredicate()
}

void comparisonPredicate() :
{
}
{
  compOperand()
  < COMPOP >
  compOperand()
}

// choice conflict
void compOperand() :
{
}
{
  comparableValue()
| (
    (
      LOOKAHEAD(2)
      tableName()
      < PERIOD >
    )?
    columnName()
  )
}
/*
void compOP() :
{
}
{
  "<" | ">" | "=" | ">=" | "<=" | "!=" 
}
*/
void comparableValue() :
{
}
{
  < INT_VALUE >
| < CHAR_STRING >
| < DATE_VALUE >
}

void nullPredicate() :
{
}
{
  (    tableName()
    < PERIOD >
  )?
  columnName()
  nullOperation()
}

void nullOperation() :
{
}
{
  < IS >
  (    < NOT >
  )?
  < NULL >
}

// INSERT
void insertQuery() :
{}
{
  < INSERT >
  < INTO >
  tableName()
  insertColumnsAndSource()
}

void insertColumnsAndSource() :
{
}
{
  (    columnNameList()
  )?
  valueList()
}

void valueList() :
{
}
{
  < VALUES >
  < LEFT_PAREN >
  value()
  (    < COMMA >
    value()
  )*
  < RIGHT_PAREN >
}

void value() :
{
}
{
  < NULL >
| comparableValue()
}

// DELETE
void deleteQuery() :
{
}
{
  < DELETE>
  < FROM >
  tableName()
  (    whereClause()
  )?
}
  

  
  
   


  

